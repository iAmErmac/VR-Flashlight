
Class S_FlashLightControl : EventHandler
{
	String player_lastweapon;
	Int delay_autoactivate_flashlight;

	override void PlayerEntered(PlayerEvent e)
	{
		PlayerInfo plr = players[e.PlayerNumber];
		if(vr_flashlight_enabled) plr.mo.setinventory("S_FlashLight", 1, false);
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		PlayerInfo plr = players[consoleplayer];
		if(!plr) return;
		
		if(!vr_flashlight_enabled) return;
		
		if(e.Name == "fl_quick_toggle")
		{		
			if(vr_flashlight_mount || plr.ReadyWeapon is "S_FlashLight")
			{
				//toggle flashlight on/off when weapon mounted or olding flashlight on main hand
				
				let fl = TrackedSpotLight(S_FlashLight(plr.mo.findinventory("S_FlashLight")).f_light);
				
				if(fl.on)
				{
					S_StartSound("DDZ_Flashlight_Off", CHAN_WEAPON, CHAN_UI);
					fl.Deactivate(plr.mo);
				}
				else
				{
					S_StartSound("DDZ_Flashlight_On", CHAN_WEAPON, CHAN_UI);
					fl.Activate(plr.mo);
				}
			}
			else
			{
				//Quickly switch to flashlight in off-hand when key pressed
				//or unequip flashlight if equipped in off-hand already
				
				if(plr.OffhandWeapon is "S_FlashLight")
				{
					int fl_battery = S_FlashLight(plr.mo.findinventory("S_FlashLight")).fl_batt_counter; //preserve battery level before removing from inventory
					plr.mo.setinventory("S_FlashLight", 0, false);
					plr.mo.setinventory("S_FlashLight", 1, false);
					S_FlashLight(plr.mo.findinventory("S_FlashLight")).fl_batt_counter = fl_battery; //restore battery level
					
					if(player_lastweapon != "" && Weapon(plr.mo.findinventory(player_lastweapon)).bOffhandWeapon)
						plr.mo.A_SelectWeapon(player_lastweapon);
				}
				else
				{
					if(plr.OffhandWeapon) player_lastweapon = plr.OffhandWeapon.GetClassName();
					Weapon(plr.mo.findinventory("S_FlashLight")).bOffhandWeapon = true; //move flashlight into off-hand
					plr.mo.A_SelectWeapon("S_FlashLight");
					delay_autoactivate_flashlight = 25;
				}
			}
		}
	}
	
	override void WorldTick()
	{
		PlayerInfo plr = players[consoleplayer];
		if(!plr) return;
		
		if(!vr_flashlight_enabled && plr.mo.countInv("S_FlashLight") > 0) plr.mo.setinventory("S_FlashLight", 0, false); //take away flashlight when disabled
		if(vr_flashlight_enabled && plr.mo.countInv("S_FlashLight") < 1) plr.mo.setinventory("S_FlashLight", 1, false); //give back flashlight when enabled
		
		if(delay_autoactivate_flashlight == 1)
		{
			S_StartSound("DDZ_Flashlight_On", CHAN_WEAPON, CHAN_UI);
			TrackedSpotLight(S_FlashLight(plr.mo.findinventory("S_FlashLight")).f_light).Activate(plr.mo);
		}
		if(delay_autoactivate_flashlight > 0)
		{
			delay_autoactivate_flashlight--;
		}
	}
}

class TrackedSpotLight : Spotlight {

    Actor toFollow;
    Vector3 offset;
    Vector3 finalOffset;
    bool ready;
    bool on;
    
    void updateFromCvars ()
	{
	    Color c = CVar.GetCVar("vr_flashlight_color").GetString();
    
        args[0] = c.r;
        args[1] = c.g;
        args[2] = c.b;    
        args[3] = CVar.GetCVar("vr_flashlight_intensity").GetInt();
        
        self.SpotInnerAngle = CVar.GetCVar("vr_flashlight_inner").GetFloat();        
        self.SpotOuterAngle = CVar.GetCVar("vr_flashlight_outer").GetFloat();
    }
    
    override void Activate(Actor activator)
	{
        updateFromCvars();
        on = true;
        super.Activate(activator);
    }
    
    override void DeActivate(Actor activator)
	{
        on = false;
        super.DeActivate(activator);
    } 
    
    override void Tick()
	{
		if(!toFollow){
			Super.Tick();
			return;
		}
			
		Vector3 s_pos;
		Double s_angle, s_pitch, s_roll;
		Bool offhand = Weapon(toFollow.player.mo.findinventory("S_FlashLight")).bOffhandWeapon && (toFollow.player.OffhandWeapon is "S_FlashLight");
	
        if(ready && on)
		{
			if(offhand)
			{
				s_pos = toFollow.OffhandPos;
				s_angle = toFollow.OffhandAngle;
				s_pitch = toFollow.OffhandPitch;
				s_roll = toFollow.OffhandRoll;
			}
			else
			{
				s_pos = toFollow.AttackPos;
				s_angle = toFollow.AttackAngle;
				s_pitch = toFollow.AttackPitch;
				s_roll = toFollow.AttackRoll;
			}
			
			if(vr_flashlight_allowflip && abs(s_roll) > 120)
			{
				s_angle -= 180;
				s_pitch *= -1;
			}
			
			offset = (20, 0, 0);
			
            A_SetAngle(s_angle + 90.0, 0);
            Vector2 finalOffset2D = RotateVector ((offset.x, offset.y), s_angle - 90.0);                         
            finalOffset = (finalOffset2D.x, finalOffset2D.y, offset.z);
            A_SetPitch(-s_pitch, SPF_INTERPOLATE);
            SetOrigin(s_pos + finalOffset, true);
        }
		else if(on && toFollow)
		{
            ready = true;
        }
        Super.Tick();
    }
    
}

Class S_FlashLight : Fist
{
	Actor f_light;
	Double fl_pitch;
	Bool f_light_on;
	int fl_batt_counter;
	int fl_batt_capacity;
	int fl_batt_level;
	int fl_batt_low_blink;
	int fl_intensity;
	float fl_inner_angle;
	float fl_outer_angle;
	int fl_flicker;
	Bool is_flipped;
	Int melee_delay;
	
	override void BeginPlay()
	{
		fl_batt_capacity = CVar.GetCVar("vr_flashlight_batt_cap").GetInt() * 60 * 35;
		fl_batt_counter = fl_batt_capacity;
		fl_batt_level = 10;
		is_flipped = false;
		melee_delay = 0;
	}
	
	override void Tick()
	{
		Super.Tick();
		
		//If dropped somehow, stop the spotlight
		
		if(!owner)
		{
			if(f_light) f_light.destroy();
			return;
		}
		
		//On start of each level create a new spotlight
		
		if(!f_light)
		{
			f_light = Actor.Spawn("TrackedSpotLight");
			TrackedSpotLight(f_light).toFollow = owner;
		}
		
		let fl = TrackedSpotLight(f_light);
		
		//Battery management routine
		
		fl_batt_capacity = CVar.GetCVar("vr_flashlight_batt_cap").GetInt() * 60 * 35;
		if(fl_batt_capacity && fl_batt_counter > fl_batt_capacity) fl_batt_counter = fl_batt_capacity;
		
		if(fl_batt_capacity > 0) //No battery management required if unlimited battery
		{
		
			if(fl_batt_counter > 0 && fl.on)
			{
				fl_batt_counter--;
			}
			else if(fl_batt_counter < fl_batt_capacity && !fl.on)
			{
				fl_batt_counter++;
			}
			else if(fl_batt_counter <= 0 && fl.on)
			{
				fl.Deactivate(owner);
				S_StartSound("DDZ_Flashlight_Off", CHAN_WEAPON, CHAN_UI);
			}
			
			if(vr_flashlight_batt_overlay)
			{
				if(fl_batt_counter > (fl_batt_capacity * 9/10))
				{
					fl_batt_level = 10;
				}
				else if(fl_batt_counter > (fl_batt_capacity * 8/10))
				{
					fl_batt_level = 9;
				}
				else if(fl_batt_counter > (fl_batt_capacity * 7/10))
				{
					fl_batt_level = 8;
				}
				else if(fl_batt_counter > (fl_batt_capacity * 6/10))
				{
					fl_batt_level = 7;
				}
				else if(fl_batt_counter > (fl_batt_capacity * 5/10))
				{
					fl_batt_level = 6;
				}
				else if(fl_batt_counter > (fl_batt_capacity * 4/10))
				{
					fl_batt_level = 5;
				}
				else if(fl_batt_counter > (fl_batt_capacity * 3/10))
				{
					fl_batt_level = 4;
				}
				else if(fl_batt_counter > (fl_batt_capacity * 2/10))
				{
					fl_batt_level = 3;
				}
				else if(fl_batt_counter > (fl_batt_capacity * 1/10))
				{
					fl_batt_level = 2;
				}
				else
				{
					fl_batt_level = 1;
					
					//This is for the blinking power led when battery is almost empty
					
					if(fl_batt_low_blink <= 0)
						fl_batt_low_blink = 35;
					else
						fl_batt_low_blink--;					
				}
			}
			else
			{
				fl_batt_level = -1;
			}
		}
		else{
			fl_batt_level = -1;
		}
		
		//Dims flashlight a bit when low on battery
		
		if(vr_flashlight_dim)
		{
		
			if(fl_flicker <= 0)
				fl_flicker = 35;
			else
				fl_flicker--;
			
			if(fl_batt_level > 0 && fl_batt_level < 6 && !fl_flicker )
			{
				fl_intensity = CVar.GetCVar("vr_flashlight_intensity").GetInt();
				fl_inner_angle = CVar.GetCVar("vr_flashlight_inner").GetFloat();
				fl_outer_angle = CVar.GetCVar("vr_flashlight_outer").GetFloat();
				
				fl_intensity = ceil(fl_intensity * 0.9);
				
				if(fl_batt_level < 2)
				{
					fl_intensity = ceil(fl_intensity * frandom(0.4,0.6));
					fl_inner_angle *= frandom(0.2,0.4);
					fl_outer_angle *= frandom(0.8,0.9);
					fl_flicker = random(5,10);
				}
				else if(fl_batt_level < 3)
				{
					fl_intensity = ceil(fl_intensity * frandom(0.6,0.7));
					fl_inner_angle *= frandom(0.5,0.7);
					fl_outer_angle *= frandom(0.8,0.9);
					fl_flicker = random(10,17);
				}
				else if(fl_batt_level < 4)
				{
					fl_intensity = ceil(fl_intensity * frandom(0.6,0.7));
				}
				else if(fl_batt_level < 5)
				{
					fl_intensity = ceil(fl_intensity * frandom(0.7,0.8));
				}
			}
		}
		
		if(fl_batt_capacity == 0 || !vr_flashlight_dim)
		{
			fl_intensity = CVar.GetCVar("vr_flashlight_intensity").GetInt();
			fl_inner_angle = CVar.GetCVar("vr_flashlight_inner").GetFloat();
			fl_outer_angle = CVar.GetCVar("vr_flashlight_outer").GetFloat();
		}		
		if(fl_intensity) fl.args[3] = fl_intensity;
		if(fl_inner_angle) fl.SpotInnerAngle = fl_inner_angle;
		if(fl_outer_angle) fl.SpotOuterAngle = fl_outer_angle;
		
		
		//Turn off light when switched to a weapon
		
		Weapon current_weapon;
		if(self.bOffhandWeapon)
			current_weapon = owner.player.OffhandWeapon;
		else
			current_weapon = owner.player.ReadyWeapon;
		
		if(!vr_flashlight_mount && current_weapon != self)
		{
			fl.DeActivate(owner);
			return;
		}
		
		
		//Melee attack routine
		
		Double b_angle = owner.angle;
		if(is_flipped) b_angle -= 180;
		double pitch = owner.AimTarget() ? owner.BulletSlope(null, ALF_PORTALRESTRICT) : owner.pitch;
		FTranslatedLineTarget t, t2, t3;
		
		Bool followOffhand = Weapon(owner.player.mo.findinventory("S_FlashLight")).bOffhandWeapon && (owner.player.OffhandWeapon is "S_FlashLight");
		
		if(vr_flashlight_melee && current_weapon is "S_FlashLight")
		{
			int m_damage = (random(1, 10) * vr_flashlight_melee_damage) << 1;
			if (owner.player.mo.FindInventory("PowerStrength"))
				m_damage *= 10;
			int attack_range = (vr_flashlight_melee_range + 1) * 32;
				
			if(!melee_delay)
			{
				//scan for melee target in a cone shaped area
				owner.LineAttack(b_angle, attack_range, pitch, 0, "none", "DummyPuff", LAF_NOINTERACT | LAF_NOIMPACTDECAL | LAF_NORANDOMPUFFZ | (followOffhand ? LAF_ISOFFHAND : 0), t);
				owner.LineAttack(b_angle - 30.0, attack_range, pitch, 0, "none", "DummyPuff", LAF_NOINTERACT | LAF_NOIMPACTDECAL | LAF_NORANDOMPUFFZ | (followOffhand ? LAF_ISOFFHAND : 0), t2);
				owner.LineAttack(b_angle + 30.0, attack_range, pitch, 0, "none", "DummyPuff", LAF_NOINTERACT | LAF_NOIMPACTDECAL | LAF_NORANDOMPUFFZ | (followOffhand ? LAF_ISOFFHAND : 0), t3);
				if(t.linetarget)
				{
					owner.LineAttack(b_angle, attack_range, pitch, m_damage, "Melee", "BulletPuff", LAF_NORANDOMPUFFZ | (followOffhand ? LAF_ISOFFHAND : 0));
					melee_delay = 22;
				}
				else if(t2.linetarget)
				{
					owner.LineAttack(b_angle - 30.0, attack_range, pitch, m_damage, "Melee", "BulletPuff", LAF_NORANDOMPUFFZ | (followOffhand ? LAF_ISOFFHAND : 0));
					melee_delay = 22;
				}
				else if(t3.linetarget)
				{
					owner.LineAttack(b_angle + 30.0, attack_range, pitch, m_damage, "Melee", "BulletPuff", LAF_NORANDOMPUFFZ | (followOffhand ? LAF_ISOFFHAND : 0));
					melee_delay = 22;
				}
			}
			else if(melee_delay > 0)
			{
				melee_delay--;
			}
		}
		
		
		if(!fl.ready || !fl.on) return;
		
		//Creating bounced light at close distance
		
		if(vr_flashlight_bouncelight)
		{
			//check first if there is any actor on target
			owner.LineAttack( b_angle
							 , 92
							 , pitch
							 , 0
							 , "none"
							 , "DummyPuff"
							 , LAF_NOINTERACT | LAF_NOIMPACTDECAL | LAF_NORANDOMPUFFZ | (followOffhand ? LAF_ISOFFHAND : 0)
							 , t
							 );
			if (!t.linetarget) { //this makes sure bounced lights are created only when hitting nearby wall/floor/ceiling
				Actor tempPuff = owner.LineAttack( b_angle
												 , 92
												 , pitch
												 , 0
												 , "none"
												 , "DummyPuff"
												 , LAF_NOIMPACTDECAL | LAF_NORANDOMPUFFZ | (followOffhand ? LAF_ISOFFHAND : 0)
												 );
				if (tempPuff != null) {
					Actor bounce_light;
					if(fl_batt_level == 2)
						bounce_light = Actor.Spawn("FlashLightSpotSmall", tempPuff.pos);
					else if(fl_batt_level == 1)
						bounce_light = Actor.Spawn("FlashLightSpotSmaller", tempPuff.pos);
					else
						bounce_light = Actor.Spawn("FlashLightSpot", tempPuff.pos);
				}
			}
		}
		
		
		//Pointing light directly on nearby monsters will alert them
		
		if(vr_flashlight_alarm)
		{
			owner.LineAttack( b_angle
							 , 960
							 , pitch
							 , 0
							 , "none"
							 , "FlashLightAlarm"
							 , LAF_NOINTERACT | LAF_NOIMPACTDECAL | LAF_NORANDOMPUFFZ | (followOffhand ? LAF_ISOFFHAND : 0)
							 );
		}
	}
	
	override void DetachFromOwner()
	{
		if(f_light) f_light.destroy();
		Super.DetachFromOwner();
	}
	
	action void A_Flashlight()
	{
		let fl = TrackedSpotLight(invoker.f_light);
		
		if(!fl.on)
		{
			fl.Activate(invoker.owner);
			S_StartSound("DDZ_Flashlight_On", CHAN_WEAPON, CHAN_UI);
		}
		else
		{
			fl.DeActivate(invoker.owner);
			S_StartSound("DDZ_Flashlight_Off", CHAN_WEAPON, CHAN_UI);
		}		
	}
	
	action void A_CheckModel()
	{
		if (!player || !invoker) return;
		
		Int model_type = CVar.GetCVar("vr_flashlight_model").GetInt();
		let fl = TrackedSpotLight(invoker.f_light);
		
		String w_sprite;
		if(model_type == 1)
		{
			if(fl && fl.on)
				w_sprite = "FLTE";
			else
				w_sprite = "FLTN";
		}
		else
		{
			if(fl && fl.on)
				w_sprite = "FLTV";
			else
				w_sprite = "FLVN";
		}
		
		if(invoker.bOffhandWeapon)
			Player.GetPSprite(PSP_OFFHANDWEAPON).sprite = GetSpriteIndex(w_sprite);
		else
			Player.GetPSprite(PSP_WEAPON).sprite = GetSpriteIndex(w_sprite);
		
		if(vr_flashlight_allowflip &&
			((invoker.bOffhandWeapon && player.OffhandWeapon is "S_FlashLight" && abs(player.mo.OffhandRoll) > 120) ||
			(!invoker.bOffhandWeapon && player.ReadyWeapon is "S_FlashLight" && abs(player.mo.AttackRoll) > 120))
		)
			invoker.is_flipped = true;
		else
			invoker.is_flipped = false;
	}
	
	action void A_CheckPickupModel()
	{
		Int model_type = CVar.GetCVar("vr_flashlight_pickup").GetInt();
		
		String p_sprite;
		if(model_type == 0)
			p_sprite = "FLSH";
		else if(model_type == 1)
			p_sprite = "FLTV";
		else
			p_sprite = "FLTE";

		invoker.sprite = GetSpriteIndex(p_sprite);
		invoker.A_SetScale(0.7);
	}
	
	Default
	{
	+WEAPONSPAWN
	+WEAPON.NOALERT;
	+WEAPON.NO_AUTO_SWITCH;
	+INVENTORY.UNTOSSABLE;
	+INVENTORY.UNDROPPABLE;
	+THRUACTORS;
	weapon.selectionorder 4141;
	inventory.maxamount 1;
	}

	States
	{
	Spawn:
		FLSH P 1 A_CheckPickupModel();
		Loop;
	Ready:
		FLTE A 0 A_CheckModel();
		"####" A 0 A_JumpIf(invoker.is_flipped == true, "ReadyFlipped");
		"####" A 0 A_Overlay(1001, "BatteryOverlay");
		"####" A 1 A_WeaponReady;
		Loop;
	ReadyFlipped:
		FLTE B 0 A_CheckModel();
		"####" B 0 A_JumpIf(invoker.is_flipped == false, "Ready");
		"####" B 1 A_WeaponReady;
		Loop;
	Deselect:
		FLTE A 0 A_CheckModel();
		"####" A 1 A_Lower(60);
		Loop;
	Select:
		FLTE A 0 A_CheckModel();
		"####" A 1 A_Raise(60);
		Loop;
	Fire:
		"####" "#" 0 A_FlashLight();
		"####" "#" 1 A_JumpIf(invoker.is_flipped == true, "WaitFlipped");
		"####" "###############" 1 A_Overlay(1001, "BatteryOverlay");
		Goto Ready;
	WaitFlipped:
		"####" "###############" 1;
		Goto ReadyFlipped;
	BatteryOverlay:
		FLBT A 0 A_JumpIf(vr_flashlight_model == 0, "VBatteryOverlay");
		"####" A 0 A_JumpIf(invoker.fl_batt_level == 0, "BatteryLevel0");
		"####" A 0 A_JumpIf(invoker.fl_batt_level == 1, "BatteryLevel1");
		"####" A 0 A_JumpIf(invoker.fl_batt_level == 2, "BatteryLevel2");
		"####" A 0 A_JumpIf(invoker.fl_batt_level == 3, "BatteryLevel3");
		"####" A 0 A_JumpIf(invoker.fl_batt_level == 4, "BatteryLevel4");
		"####" A 0 A_JumpIf(invoker.fl_batt_level == 5, "BatteryLevel5");
		"####" A 0 A_JumpIf(invoker.fl_batt_level == 6, "BatteryLevel6");
		"####" A 0 A_JumpIf(invoker.fl_batt_level == 7, "BatteryLevel7");
		"####" A 0 A_JumpIf(invoker.fl_batt_level == 8, "BatteryLevel8");
		"####" A 0 A_JumpIf(invoker.fl_batt_level == 9, "BatteryLevel9");
		"####" A 0 A_JumpIf(invoker.fl_batt_level == 10, "BatteryLevel10");
		Stop;
	BatteryLevel0:
		FLBT A 1;
		Stop;
	BatteryLevel1:
		FLBT A 0 A_JumpIf(invoker.fl_batt_low_blink < 18, "BatteryLevel0");
		FLBT B 1;
		Stop;
	BatteryLevel2:
		FLBT C 1;
		Stop;
	BatteryLevel3:
		FLBT D 1;
		Stop;
	BatteryLevel4:
		FLBT E 1;
		Stop;
	BatteryLevel5:
		FLBT F 1;
		Stop;
	BatteryLevel6:
		FLBT G 1;
		Stop;
	BatteryLevel7:
		FLBT H 1;
		Stop;
	BatteryLevel8:
		FLBT I 1;
		Stop;
	BatteryLevel9:
		FLBT J 1;
		Stop;
	BatteryLevel10:
		FLBT K 1;
		Stop;
	VBatteryOverlay:
		FLBV A 0 A_JumpIf(invoker.fl_batt_level == 0, "VBatteryLevel0");
		FLBV A 0 A_JumpIf(invoker.fl_batt_level == 1, "VBatteryLevel1");
		FLBV A 0 A_JumpIf(invoker.fl_batt_level == 2, "VBatteryLevel2");
		FLBV A 0 A_JumpIf(invoker.fl_batt_level == 3, "VBatteryLevel3");
		FLBV A 0 A_JumpIf(invoker.fl_batt_level == 4, "VBatteryLevel4");
		FLBV A 0 A_JumpIf(invoker.fl_batt_level == 5, "VBatteryLevel5");
		FLBV A 0 A_JumpIf(invoker.fl_batt_level == 6, "VBatteryLevel6");
		FLBV A 0 A_JumpIf(invoker.fl_batt_level == 7, "VBatteryLevel7");
		FLBV A 0 A_JumpIf(invoker.fl_batt_level == 8, "VBatteryLevel8");
		FLBV A 0 A_JumpIf(invoker.fl_batt_level == 9, "VBatteryLevel9");
		FLBV A 0 A_JumpIf(invoker.fl_batt_level == 10, "VBatteryLevel10");
		Stop;
	VBatteryLevel0:
		FLBV A 1;
		Stop;
	VBatteryLevel1:
		FLBV A 0 A_JumpIf(invoker.fl_batt_low_blink < 18, "VBatteryLevel0");
		FLBV B 1;
		Stop;
	VBatteryLevel2:
		FLBV C 1;
		Stop;
	VBatteryLevel3:
		FLBV D 1;
		Stop;
	VBatteryLevel4:
		FLBV E 1;
		Stop;
	VBatteryLevel5:
		FLBV F 1;
		Stop;
	VBatteryLevel6:
		FLBV G 1;
		Stop;
	VBatteryLevel7:
		FLBV H 1;
		Stop;
	VBatteryLevel8:
		FLBV I 1;
		Stop;
	VBatteryLevel9:
		FLBV J 1;
		Stop;
	VBatteryLevel10:
		FLBV K 1;
		Stop;
	Dummy:
		FLTN A 0;
		FLTV A 0;
		FLVN A 0;
		Stop;
	}
}

//Dynamic light actors to use when flashlight hits the floor

Class DummyPuff : BulletPuff
{
	Default
	{
	+NOGRAVITY;
	+DONTSPLASH;
	Renderstyle "None";
	Damage 0;
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

Class FlashLightSpot : Actor
{
	Default
	{
	+NOGRAVITY;
	+NOBLOCKMAP;
	+DONTSPLASH;
	+THRUACTORS;
	-COUNTKILL;
	Renderstyle "None";
	Radius 10;
	Height 10;
	Damage 0;
	}
	
	States
	{
	Spawn:
		TNT1 A 3; //Why do you need 3 ticks to spawn dynamic light?
		Stop;
	}
}

Class FlashLightSpotSmall : FlashLightSpot {}
Class FlashLightSpotSmaller : FlashLightSpot {}

//This actr is used to alert monsters when they are on the spotlight

Class FlashLightAlarm : Actor
{
	Default
	{
	+NOGRAVITY;
	+NOBLOCKMAP;
	+DONTSPLASH;
	+THRUACTORS;
	+SHOOTABLE;
	-COUNTKILL;
	Health 9999;
	Renderstyle "none";
	Radius 10;
	Height 10;
	Damage 0;
	}
	
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 10 A_AlertMonsters(92, AMF_TARGETEMITTER);
		Stop;
	}
}